/**
 * GripMock API Schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddStubRequest from '../model/AddStubRequest';
import SearchRequest from '../model/SearchRequest';
import SearchResponse from '../model/SearchResponse';
import Stub from '../model/Stub';

/**
* Stubs service.
* @module api/StubsApi
* @version 1.0.0
*/
export default class StubsApi {

    /**
    * Constructs a new StubsApi. 
    * @alias module:api/StubsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a new stub to the store
     * Add a new stub to the store
     * @param {module:model/AddStubRequest} addStubRequest Create a new pet in the store
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    addStubWithHttpInfo(addStubRequest) {
      let postBody = addStubRequest;
      // verify the required parameter 'addStubRequest' is set
      if (addStubRequest === undefined || addStubRequest === null) {
        throw new Error("Missing the required parameter 'addStubRequest' when calling addStub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/stubs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a new stub to the store
     * Add a new stub to the store
     * @param {module:model/AddStubRequest} addStubRequest Create a new pet in the store
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    addStub(addStubRequest) {
      return this.addStubWithHttpInfo(addStubRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a pack by IDs
     * Takes IDs as input and deletes them
     * @param {Array.<String>} requestBody Create a new pet in the store
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    batchStubsDeleteWithHttpInfo(requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling batchStubsDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stubs/batchDelete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a pack by IDs
     * Takes IDs as input and deletes them
     * @param {Array.<String>} requestBody Create a new pet in the store
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    batchStubsDelete(requestBody) {
      return this.batchStubsDeleteWithHttpInfo(requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes stub by ID
     * The method removes the stub by ID
     * @param {String} uuid ID of stub
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteStubByIDWithHttpInfo(uuid) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteStubByID");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stubs/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes stub by ID
     * The method removes the stub by ID
     * @param {String} uuid ID of stub
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteStubByID(uuid) {
      return this.deleteStubByIDWithHttpInfo(uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Stub by ID
     * Searches for Stub by ID
     * @param {String} uuid ID of stub
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Stub} and HTTP response
     */
    findByIDWithHttpInfo(uuid) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling findByID");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stub;
      return this.apiClient.callApi(
        '/stubs/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Stub by ID
     * Searches for Stub by ID
     * @param {String} uuid ID of stub
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Stub}
     */
    findByID(uuid) {
      return this.findByIDWithHttpInfo(uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Getting a list of stubs
     * The list of stubs is required to view all added stubs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Stub>} and HTTP response
     */
    listStubsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stub];
      return this.apiClient.callApi(
        '/stubs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting a list of stubs
     * The list of stubs is required to view all added stubs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Stub>}
     */
    listStubs() {
      return this.listStubsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Getting a list of unused stubs
     * The list is needed to quickly find unused stubs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Stub>} and HTTP response
     */
    listUnusedStubsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stub];
      return this.apiClient.callApi(
        '/stubs/unused', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting a list of unused stubs
     * The list is needed to quickly find unused stubs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Stub>}
     */
    listUnusedStubs() {
      return this.listUnusedStubsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Getting a list of used stubs
     * The list is needed to quickly find used stubs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Stub>} and HTTP response
     */
    listUsedStubsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stub];
      return this.apiClient.callApi(
        '/stubs/used', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting a list of used stubs
     * The list is needed to quickly find used stubs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Stub>}
     */
    listUsedStubs() {
      return this.listUsedStubsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove all stubs
     * Completely clears the stub storage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    purgeStubsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stubs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove all stubs
     * Completely clears the stub storage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    purgeStubs() {
      return this.purgeStubsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stub storage search
     * Performs a search for a stub by the given conditions
     * @param {module:model/SearchRequest} searchRequest Description of filtering
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchResponse} and HTTP response
     */
    searchStubsWithHttpInfo(searchRequest) {
      let postBody = searchRequest;
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling searchStubs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchResponse;
      return this.apiClient.callApi(
        '/stubs/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stub storage search
     * Performs a search for a stub by the given conditions
     * @param {module:model/SearchRequest} searchRequest Description of filtering
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SearchResponse}
     */
    searchStubs(searchRequest) {
      return this.searchStubsWithHttpInfo(searchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
