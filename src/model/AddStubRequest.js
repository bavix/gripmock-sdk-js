/**
 * GripMock API Schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Stub from './Stub';
import StubHeaders from './StubHeaders';
import StubInput from './StubInput';
import StubOutput from './StubOutput';

/**
 * The AddStubRequest model module.
 * @module model/AddStubRequest
 * @version 1.0.0
 */
class AddStubRequest {
    /**
     * Constructs a new <code>AddStubRequest</code>.
     * @alias module:model/AddStubRequest
     * @param {(module:model/Stub|module:model/[Stub])} instance The actual instance to initialize AddStubRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "[Stub]") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                [Stub].validateJSON(instance); // throw an exception if no match
                // create [Stub] from JS object
                this.actualInstance = [Stub].constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into [Stub]
            errorMessages.push("Failed to construct [Stub]: " + err)
        }

        try {
            if (typeof instance === "Stub") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Stub.validateJSON(instance); // throw an exception if no match
                // create Stub from JS object
                this.actualInstance = Stub.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Stub
            errorMessages.push("Failed to construct Stub: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AddStubRequest` with oneOf schemas Stub, [Stub]. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AddStubRequest` with oneOf schemas Stub, [Stub]. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AddStubRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddStubRequest} obj Optional instance to populate.
     * @return {module:model/AddStubRequest} The populated <code>AddStubRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AddStubRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>Stub</code>, <code>[Stub]</code>.
     * @return {(module:model/Stub|module:model/[Stub])} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Stub</code>, <code>[Stub]</code>.
     * @param {(module:model/Stub|module:model/[Stub])} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AddStubRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AddStubRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AddStubRequest} An instance of AddStubRequest.
     */
    static fromJSON = function(json_string){
        return AddStubRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} id
 */
AddStubRequest.prototype['id'] = undefined;

/**
 * @member {String} service
 */
AddStubRequest.prototype['service'] = undefined;

/**
 * @member {String} method
 */
AddStubRequest.prototype['method'] = undefined;

/**
 * @member {module:model/StubHeaders} headers
 */
AddStubRequest.prototype['headers'] = undefined;

/**
 * @member {module:model/StubInput} input
 */
AddStubRequest.prototype['input'] = undefined;

/**
 * @member {module:model/StubOutput} output
 */
AddStubRequest.prototype['output'] = undefined;


AddStubRequest.OneOf = ["Stub", "[Stub]"];

export default AddStubRequest;

