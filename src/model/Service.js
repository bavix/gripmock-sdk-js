/**
 * GripMock API Schema
 * Documentation and API specification GripMock.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Method from './Method';

/**
 * The Service model module.
 * @module model/Service
 * @version 1.0.0
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * @alias module:model/Service
     * @param id {String} 
     * @param _package {String} 
     * @param name {String} 
     * @param methods {Array.<module:model/Method>} 
     */
    constructor(id, _package, name, methods) { 
        
        Service.initialize(this, id, _package, name, methods);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, _package, name, methods) { 
        obj['id'] = id;
        obj['package'] = _package;
        obj['name'] = name;
        obj['methods'] = methods;
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = ApiClient.convertToType(data['package'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('methods')) {
                obj['methods'] = ApiClient.convertToType(data['methods'], [Method]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Service.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['package'] && !(typeof data['package'] === 'string' || data['package'] instanceof String)) {
            throw new Error("Expected the field `package` to be a primitive type in the JSON string but got " + data['package']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['methods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['methods'])) {
                throw new Error("Expected the field `methods` to be an array in the JSON data but got " + data['methods']);
            }
            // validate the optional field `methods` (array)
            for (const item of data['methods']) {
                Method.validateJSON(item);
            };
        }

        return true;
    }


}

Service.RequiredProperties = ["id", "package", "name", "methods"];

/**
 * @member {String} id
 */
Service.prototype['id'] = undefined;

/**
 * @member {String} package
 */
Service.prototype['package'] = undefined;

/**
 * @member {String} name
 */
Service.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Method>} methods
 */
Service.prototype['methods'] = undefined;






export default Service;

